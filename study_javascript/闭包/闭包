闭包：就是能够读取其他函数内部变量的函数。
        在javascript里面只有函数内部的子函数才能读取局部变量，
        因此可以把闭包简单理解成“定义在一个函数内部的函数”，
本质上：闭包是将函数内部和函数外部连接起来的一座桥梁,当return一个内部function的时候就是闭包
        或者可以说如果一个函数访问了它的外部变量，那么它就是一个闭包
        （泛泛的说：在JS里面，每一个function都是闭包，因为总是能访问在它外部定义的数据）
作用：（1）读取函数内部的变量
     （2）让这些变量的值始终保持在内存中----“记住了周围发生了什么，维持局部数据（定义在闭包中的函数可以“记忆”它创建时候的环境）”
     例如：
           function Test() {
               var n = 999;
               addNumber = function () {
                   n += 1
               };
               function TestTwo() {
                   console.log(n);
               }
               return TestTwo;
           }
           var result = Test();
           result();// 999
           addNumber();
           //addNumber是一个全局变量，值是匿名函数（这里的匿名函数本身就是一个闭包），
           //可以在函数外部对函数内部的局部变量进行操作。
           result(); // 1000

注意：(1)闭包会使函数中的变量都被保存在内存里面，内存消耗很大，不能滥用
     (2)闭包会在父函数外部，改变父函数内部变量的值。

易错点：闭包是使用值的引用不是拷贝，当在循环中使用闭包的时候注意最好使用拷贝
       例如：
       代码一：
        for (var i = 0; i < 10; i++) {
            setTimeout(function () {
                console.log(i);
            }, 1000);
        }//输出10个10
        代码二：
       for(var i = 0; i < 10; i++) {
       (function(e) {
           setTimeout(function() {
               console.log(e);
           }, 1000);
       })(i);//将i拷贝传值给匿名函数
       }//输出0到9
       代码三：
       for(var i = 0; i < 10; i++) {
           setTimeout((function(e) {
               return function() {
                   console.log(e);
               }
           })(i), 1000)
       }
       在循环里面使用闭包，最好就是添加函数，使用值传递不用引用